services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - project_default

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "kafka-logs:1:1,error-logs:1:1"
    depends_on:
      - zookeeper
    networks:
      - project_default

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms4g -Xmx4g
      - node.store.allow_mmap=false
      - xpack.security.transport.ssl.enabled=false
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    volumes:
      - es-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - project_default

    command: >
      /bin/bash -c "
          # 키스토어가 존재하지 않으면 생성
          if [ ! -f config/elasticsearch.keystore ]; then
            echo 'Elasticsearch 키스토어가 존재하지 않습니다. 키스토어를 생성합니다.';
            bin/elasticsearch-keystore create;
          fi;

          # analysis-nori 플러그인 설치
          if [ ! -d '/usr/share/elasticsearch/plugins/analysis-nori' ]; then
            bin/elasticsearch-plugin install --batch analysis-nori;
          fi;

          # Elasticsearch 시작
          /usr/local/bin/docker-entrypoint.sh eswrapper &
          echo 'Elasticsearch 시작 대기 중...'
          while ! curl -s -k http://localhost:9200 > /dev/null; do
            sleep 5
          done

          echo 'Elasticsearch가 실행 중입니다. 사용자 비밀번호 설정 중...'

          # elastic 사용자 비밀번호 변경
          curl -k -X POST 'http://localhost:9200/_security/user/elastic/_password' -u \"elastic:${ELASTIC_PASSWORD}\" -H 'Content-Type: application/json' -d '{"password": "${ELASTIC_PASSWORD}"}'

          # kibana_system 사용자 비밀번호 변경
          curl -k -X POST 'http://localhost:9200/_security/user/kibana_system/_password' -u \"elastic:${ELASTIC_PASSWORD}\" -H 'Content-Type: application/json' -d '{"password": "${KIBANA_PASSWORD}"}'

          echo '서비스 토큰 생성 중...'
          bin/elasticsearch-service-tokens create elastic/kibana kibana-token | tail -n1 | tr -d '\n' > /usr/share/elasticsearch/config/token.env

          if [ -s /usr/share/elasticsearch/config/token.env ]; then
            echo '서비스 토큰이 성공적으로 생성되었습니다.'
            echo '토큰이 성공적으로 저장되었습니다.'
          else
            echo '토큰생성에 실패했습니다. Elasticsearch 로그를 확인하세요.'
          fi;
          wait"
    healthcheck:
      test: [ "CMD", "curl", "-f", "-k", "-u", "elastic:${ELASTIC_PASSWORD}", "http://localhost:9200/_cluster/health" ]
      interval: 60s
      timeout: 120s
      retries: 10
      start_period: 300s

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.4
    container_name: logstash
    user: logstash
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5000:5000"
      - "9600:9600"
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9600/_node/stats" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - project_default

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.4
    container_name: kibana
    environment:
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    command: >
      /bin/bash -c "
                    while [ ! -f /usr/share/elasticsearch/config/token.env ]; do
                      sleep 1
                    done
                    /usr/local/bin/kibana-docker --allow-root &
                    wait"
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://elasticsearch:5601/api/status | grep -q 'Looking good'" ]
      interval: 10s
      timeout: 10s
      retries: 120
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
    networks:
      - project_default

  springboot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: springboot
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_started
      logstash:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - ./springboot-server.p12:/app/springboot-server.p12:ro
    networks:
      - project_default

volumes:
  es-data:

networks:
  project_default:
    external: true
